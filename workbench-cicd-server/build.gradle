buildscript {
	ext {
		springBootVersion = '1.5.3.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'

version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
}

sourceSets {
	integrationTest {
		java {
			compileClasspath += main.output + test.output
			runtimeClasspath += main.output + test.output
			srcDir file('src/integration-test/java')
		}
		resources.srcDir file('src/integration-test/resources')
	}

/*
    // This is just to trick IntelliJ IDEA to add integration test
    // resources to classpath when running integration tests from
    // the IDE. It's is not a good solution but I don't know about
    // a better one.
    test {
        resources.srcDir file('src/integration-test/resources')
    }
*/
}

configurations {
	integrationTestCompile.extendsFrom testCompile
	integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-jersey')

    testCompile('org.springframework.boot:spring-boot-starter-test')

	integrationTestCompile('io.rest-assured:rest-assured:3.0.3')

    integrationTestCompile('javax.xml.bind:jaxb-api:2.2.7')
}

test {
	systemProperty("spring.profiles.active", project.properties.get("springTestProfile")?:'test')

	testLogging {
		showStandardStreams = false
		events "passed", "skipped", "failed"
	}
}

task integrationTest(type: Test) {
	def profile = project.properties.get("springTestProfile") ?: 'it'
	println "Integrationtest will use Spring profile ${profile}"
	systemProperty("spring.profiles.active", profile)

	testClassesDir = sourceSets.integrationTest.output.classesDir
	classpath = sourceSets.integrationTest.runtimeClasspath
//    outputs.upToDateWhen { false }
	testLogging {
		events "passed", "skipped", "failed"
	}
}
